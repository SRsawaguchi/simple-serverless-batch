AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-serverless-batch

  Sample SAM Template for simple-serverless-batch

Globals:
  Function:
    Runtime: python3.8
    Timeout: 15

Parameters:
  TableName:
    Type: String
    Description: "DynamoDB Table Name"
    Default: "Messages"
  DynamoDBEndpoint:
    Type: String
    Description: "Endpoint of DynamoDB Local. If api runs in aws, set it empty string."
    Default: ""
  S3Endpoint:
    Type: String
    Description: "Endpoint of S3 Local(minio). If api runs in aws, set it empty string."
    Default: ""
  S3BucketName:
    Type: String
    Description: "Bucket name of S3"
  MinioRootUser:
    Type: String
    Description: "Username for Minio"
  MinioRootPassword:
    Type: String
    Description: "Password for Minio."

Resources:
  ##################
  # DynamoDB Table #
  ##################
  MessagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref TableName
      PrimaryKey:
        Name: Date
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ##############
  # IAM POLICY #
  ##############
  DynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "DynamoDB-student-activity"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:DescribeTable"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:UpdateItem"
            Resource: !Sub "arn:aws:dynamodb:*:*:table/${TableName}"
      Roles:
        - !Ref MakeReportFunctionRole
    
  S3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "S3-bucket-student-activity"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
      Roles:
        - !Ref MakeReportFunctionRole
        - !Ref HtmlToPdfFunctionRole

  ##############
  #  IAM ROLE  #
  ##############
  MakeReportFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HtmlToPdfFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"

  CallStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: InvokeStepFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !GetAtt MakeReportStateMachine.Arn

  #################
  #  Lambda Layer #
  #################
  WkhtmltopdfLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: "Binary of wkhtmltopdf. see https://wkhtmltopdf.org/downloads.html"
      ContentUri: functions/layer/wkhtmltopdf/wkhtmltox-0.12.6-4.amazonlinux2_lambda.zip

  ##############
  #  Function  #
  ##############
  MakeReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/make_report/
      Handler: app.lambda_handler
      Environment:
        Variables:
          SSB_BUCKET_NAME: !Ref S3BucketName
          SSB_DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
          SSB_DYNAMODB_TABLE_NAME: !Ref TableName
          SSB_MINIO_PASSWORD: !Ref MinioRootPassword
          SSB_MINIO_USER: !Ref MinioRootUser
          SSB_S3_ENDPOINT: !Ref S3Endpoint 
      Role: !GetAtt MakeReportFunctionRole.Arn

  HtmlToPdfFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/html_to_pdf/
      Handler: app.lambda_handler
      Layers:
        - !Ref WkhtmltopdfLambdaLayer
      Environment:
        Variables:
          FONTCONFIG_PATH: /var/task/assets/fonts
          SSB_MINIO_PASSWORD: !Ref MinioRootPassword
          SSB_MINIO_USER: !Ref MinioRootUser
          SSB_S3_ENDPOINT: !Ref S3Endpoint 
          SSB_WKHTMLTOPDF_PATH: /opt/bin/wkhtmltopdf
      Role: !GetAtt HtmlToPdfFunctionRole.Arn

  ##############
  #  Log Group #
  ##############
  MakeReportStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: "simple-serverless-batch"
      RetentionInDays: 60

  ###################
  #  State Machine  #
  ###################
  MakeReportStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/make_report.asl.json
      DefinitionSubstitutions:
        MakeReportFunctionArn: !GetAtt MakeReportFunction.Arn
        HtmlToPdfFunctionArn: !GetAtt HtmlToPdfFunction.Arn
      Logging:
        Level: "ERROR"
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt MakeReportStateMachineLogGroup.Arn
      Role: !GetAtt StatesExecutionRole.Arn

  ##################
  #  Event Bridge  #
  ##################
  CallStateMachine:
    Type: AWS::Events::Rule
    Properties:
      Name: "CallMakeReportStateMachine"
      Description: "Event for call MakeReportStateMachine(StepFunctions)."
      ScheduleExpression: cron(0 10 ? * MON-FRI *)
      State: ENABLED
      Targets: 
        -
          Arn: !GetAtt MakeReportStateMachine.Arn
          RoleArn: !GetAtt CallStateMachineRole.Arn
          Id: CallStateMachine
